name: Release

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type of version bump to create'
        required: true
        type: choice
        options:
          - auto
          - patch
          - minor
          - major

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  analyze-and-propose:
    name: Analyze and Propose Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install semantic-release packages
        run: |
          pnpm add -D semantic-release @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/npm @semantic-release/git

      - name: Determine version type
        id: version_type
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.version_type }}" != "auto" ]]; then
            # Manual version bump requested
            echo "Creating ${{ github.event.inputs.version_type }} release"
            echo "bump=${{ github.event.inputs.version_type }}" >> $GITHUB_OUTPUT
          else
            # Automatic version determination based on commits
            echo "Determining version automatically"
            echo "bump=auto" >> $GITHUB_OUTPUT
          fi

      - name: Create branch for version bump
        id: create_branch
        run: |
          # Generate a unique branch name
          BRANCH_NAME="release-$(date +%Y%m%d%H%M%S)"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # Create and checkout branch
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b $BRANCH_NAME

      - name: Setup semantic-release config
        run: |
          # Create semantic-release config
          cat > .releaserc.json << EOF
          {
            "branches": ["main"],
            "plugins": [
              ["@semantic-release/commit-analyzer", {
                "preset": "angular",
                "releaseRules": [
                  {"type": "chore", "scope": "i18n", "release": "patch"},
                  {"type": "feat", "release": "minor"},
                  {"type": "fix", "release": "patch"},
                  {"type": "perf", "release": "patch"}
                ]
              }],
              "@semantic-release/release-notes-generator",
              ["@semantic-release/npm", {
                "npmPublish": false
              }],
              ["@semantic-release/git", {
                "assets": ["package.json"],
                "message": "chore(release): \${nextRelease.version} [skip ci]\n\n\${nextRelease.notes}"
              }]
            ],
            "dryRun": true,
            "ci": false
          }
          EOF

      - name: Analyze version
        id: analyze
        run: |
          # Run semantic-release in dry-run mode to get next version
          SEMANTIC_OUTPUT=$(npx semantic-release --dry-run)
          echo "Semantic Release Output: $SEMANTIC_OUTPUT"
          
          # Try different regex patterns to extract version
          NEXT_VERSION=$(echo "$SEMANTIC_OUTPUT" | grep -oP "The next release version is \K[0-9]+\.[0-9]+\.[0-9]+" || echo "")
          
          if [ -z "$NEXT_VERSION" ]; then
            # Try alternative patterns
            NEXT_VERSION=$(echo "$SEMANTIC_OUTPUT" | grep -oP "determined version \K[0-9]+\.[0-9]+\.[0-9]+" || echo "")
          fi
          
          if [ -z "$NEXT_VERSION" ]; then
            # Try another alternative pattern
            NEXT_VERSION=$(echo "$SEMANTIC_OUTPUT" | grep -oP "Release version \K[0-9]+\.[0-9]+\.[0-9]+" || echo "")
          fi
          
          if [ -z "$NEXT_VERSION" ]; then
            # Check if there are no changes to release
            if echo "$SEMANTIC_OUTPUT" | grep -q "There are no relevant changes, so no new version is released"; then
              echo "No changes to release"
              echo "has_changes=false" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            # Fallback to current version + patch
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            echo "Could not determine next version from semantic-release output, using current version: $CURRENT_VERSION"
            echo "has_changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Next version: $NEXT_VERSION"
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "has_changes=true" >> $GITHUB_OUTPUT
          
          # If manually specified version type, use npm version to bump
          if [[ "${{ steps.version_type.outputs.bump }}" != "auto" ]]; then
            npm version ${{ steps.version_type.outputs.bump }} --no-git-tag-version
            NEXT_VERSION=$(node -p "require('./package.json').version")
            echo "Manual version bump to: $NEXT_VERSION"
            echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Update package.json and commit
        if: steps.analyze.outputs.has_changes == 'true'
        run: |
          if [[ "${{ steps.version_type.outputs.bump }}" == "auto" ]]; then
            npm version ${{ steps.analyze.outputs.next_version }} --no-git-tag-version --allow-same-version
          fi
          
          git add package.json
          git commit -m "chore(release): bump version to ${{ steps.analyze.outputs.next_version }}"
          git push origin ${{ steps.create_branch.outputs.branch_name }}

      - name: Create Pull Request
        if: steps.analyze.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "chore(release): bump version to ${{ steps.analyze.outputs.next_version }}"
          body: |
            ## Version Bump: ${{ steps.analyze.outputs.next_version }}
            
            This PR was automatically created by the release workflow.
            
            Changes included in this release:
            
            - Version bump to ${{ steps.analyze.outputs.next_version }}
            
            Once merged, the package will be available with the new version.
          branch: ${{ steps.create_branch.outputs.branch_name }}
          base: main
          delete-branch: true
          labels: |
            automated-pr
            release 